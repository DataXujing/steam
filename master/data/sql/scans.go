// DON'T EDIT *** generated by scaneo *** DON'T EDIT //

package sql

import "database/sql"

func ScanCluster(r *sql.Row) (Cluster, error) {
	var s Cluster
	if err := r.Scan(
		&s.Id,
		&s.Name,
		&s.ClusterTypeId,
		&s.DetailId,
		&s.Address,
		&s.State,
		&s.Created,
	); err != nil {
		return Cluster{}, err
	}
	return s, nil
}

func ScanClusters(rs *sql.Rows) ([]Cluster, error) {
	structs := make([]Cluster, 0, 16)
	var err error
	for rs.Next() {
		var s Cluster
		if err = rs.Scan(
			&s.Id,
			&s.Name,
			&s.ClusterTypeId,
			&s.DetailId,
			&s.Address,
			&s.State,
			&s.Created,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanClusterType(r *sql.Row) (ClusterType, error) {
	var s ClusterType
	if err := r.Scan(
		&s.Id,
		&s.Name,
	); err != nil {
		return ClusterType{}, err
	}
	return s, nil
}

func ScanClusterTypes(rs *sql.Rows) ([]ClusterType, error) {
	structs := make([]ClusterType, 0, 16)
	var err error
	for rs.Next() {
		var s ClusterType
		if err = rs.Scan(
			&s.Id,
			&s.Name,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanClusterYarnDetail(r *sql.Row) (ClusterYarnDetail, error) {
	var s ClusterYarnDetail
	if err := r.Scan(
		&s.Id,
		&s.EngineId,
		&s.Size,
		&s.ApplicationId,
		&s.Memory,
		&s.OutputDir,
	); err != nil {
		return ClusterYarnDetail{}, err
	}
	return s, nil
}

func ScanClusterYarnDetails(rs *sql.Rows) ([]ClusterYarnDetail, error) {
	structs := make([]ClusterYarnDetail, 0, 16)
	var err error
	for rs.Next() {
		var s ClusterYarnDetail
		if err = rs.Scan(
			&s.Id,
			&s.EngineId,
			&s.Size,
			&s.ApplicationId,
			&s.Memory,
			&s.OutputDir,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanEngine(r *sql.Row) (Engine, error) {
	var s Engine
	if err := r.Scan(
		&s.Id,
		&s.Name,
		&s.Location,
		&s.Created,
	); err != nil {
		return Engine{}, err
	}
	return s, nil
}

func ScanEngines(rs *sql.Rows) ([]Engine, error) {
	structs := make([]Engine, 0, 16)
	var err error
	for rs.Next() {
		var s Engine
		if err = rs.Scan(
			&s.Id,
			&s.Name,
			&s.Location,
			&s.Created,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanIdentityWorkgroup(r *sql.Row) (IdentityWorkgroup, error) {
	var s IdentityWorkgroup
	if err := r.Scan(
		&s.IdentityId,
		&s.WorkgroupId,
	); err != nil {
		return IdentityWorkgroup{}, err
	}
	return s, nil
}

func ScanIdentityWorkgroups(rs *sql.Rows) ([]IdentityWorkgroup, error) {
	structs := make([]IdentityWorkgroup, 0, 16)
	var err error
	for rs.Next() {
		var s IdentityWorkgroup
		if err = rs.Scan(
			&s.IdentityId,
			&s.WorkgroupId,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanModelCategory(r *sql.Row) (ModelCategory, error) {
	var s ModelCategory
	if err := r.Scan(
		&s.Id,
		&s.Name,
	); err != nil {
		return ModelCategory{}, err
	}
	return s, nil
}

func ScanModelCategorys(rs *sql.Rows) ([]ModelCategory, error) {
	structs := make([]ModelCategory, 0, 16)
	var err error
	for rs.Next() {
		var s ModelCategory
		if err = rs.Scan(
			&s.Id,
			&s.Name,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanPermission(r *sql.Row) (Permission, error) {
	var s Permission
	if err := r.Scan(
		&s.Id,
		&s.Code,
		&s.Description,
	); err != nil {
		return Permission{}, err
	}
	return s, nil
}

func ScanPermissions(rs *sql.Rows) ([]Permission, error) {
	structs := make([]Permission, 0, 16)
	var err error
	for rs.Next() {
		var s Permission
		if err = rs.Scan(
			&s.Id,
			&s.Code,
			&s.Description,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanPrivilege(r *sql.Row) (Privilege, error) {
	var s Privilege
	if err := r.Scan(
		&s.Id,
		&s.Typ,
		&s.WorkgroupId,
		&s.EntityType,
		&s.EntityId,
	); err != nil {
		return Privilege{}, err
	}
	return s, nil
}

func ScanPrivileges(rs *sql.Rows) ([]Privilege, error) {
	structs := make([]Privilege, 0, 16)
	var err error
	for rs.Next() {
		var s Privilege
		if err = rs.Scan(
			&s.Id,
			&s.Typ,
			&s.WorkgroupId,
			&s.EntityType,
			&s.EntityId,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanProject(r *sql.Row) (Project, error) {
	var s Project
	if err := r.Scan(
		&s.Id,
		&s.Name,
		&s.Description,
		&s.ModelCategory,
		&s.Created,
	); err != nil {
		return Project{}, err
	}
	return s, nil
}

func ScanProjects(rs *sql.Rows) ([]Project, error) {
	structs := make([]Project, 0, 16)
	var err error
	for rs.Next() {
		var s Project
		if err = rs.Scan(
			&s.Id,
			&s.Name,
			&s.Description,
			&s.ModelCategory,
			&s.Created,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanState(r *sql.Row) (State, error) {
	var s State
	if err := r.Scan(
		&s.Id,
		&s.Name,
	); err != nil {
		return State{}, err
	}
	return s, nil
}

func ScanStates(rs *sql.Rows) ([]State, error) {
	structs := make([]State, 0, 16)
	var err error
	for rs.Next() {
		var s State
		if err = rs.Scan(
			&s.Id,
			&s.Name,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

func ScanService(r *sql.Row) (Service, error) {
	var s Service
	if err := r.Scan(
		&s.Id,
		&s.ProjectId,
		&s.ModelId,
		&s.Name,
		&s.Host,
		&s.Port,
		&s.ProcessId,
		&s.State,
		&s.Created,
	); err != nil {
		return Service{}, err
	}
	return s, nil
}

func ScanServices(rs *sql.Rows) ([]Service, error) {
	structs := make([]Service, 0, 16)
	var err error
	for rs.Next() {
		var s Service
		if err = rs.Scan(
			&s.Id,
			&s.ProjectId,
			&s.ModelId,
			&s.Name,
			&s.Host,
			&s.Port,
			&s.ProcessId,
			&s.State,
			&s.Created,
		); err != nil {
			return nil, err
		}
		structs = append(structs, s)
	}
	if err = rs.Err(); err != nil {
		return nil, err
	}
	return structs, nil
}

